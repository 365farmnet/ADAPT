using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Xml.Serialization;
using JohnDeere.Representation.RepresentationSystem.Generated;

namespace JohnDeere.Representation.UnitSystem
{
    public class UnitSystemManager
    {
        private static UnitSystemManager _instance;
        private static readonly object ThreadLock = new object();
<<<<<<< HEAD

        private readonly Dictionary<string, UnitType> _unitTypes = new Dictionary<string, UnitType>();
        private readonly Dictionary<UnitSystem, UnitOfMeasureSystem> _unitSystems = new Dictionary<UnitSystem, UnitOfMeasureSystem>();
        private readonly Dictionary<string, UnitOfMeasure> _unitsOfMeasure = new Dictionary<string, UnitOfMeasure>();
=======
        private readonly Dictionary<string, UnitType> _unitsTypes = new Dictionary<string, UnitType>();
>>>>>>> 363d978a247374c443331ec1c867bf3a384afe07

        public static UnitSystemManager Instance
        {
            get
            {
                if(_instance == null)
                    lock (ThreadLock)
                    {
                        if(_instance == null)
                            _instance = new UnitSystemManager();
                    }
                return _instance;
            }
        }

        private UnitSystemManager()
        {
            var unitSystem = DeserializeUnitSystem();
            ImportUnitTypes(unitSystem);
            ImportUnitSystems(unitSystem);
        }

        public Dictionary<string, UnitType> UnitTypes
        {
            get { return _unitTypes; }
        }

        public Dictionary<string, UnitOfMeasure> UnitsOfMeasure
        {
            get { return _unitsOfMeasure; }
        }

        public Dictionary<UnitSystem, UnitOfMeasureSystem> UnitOfMeasureSystems
        {
            get { return _unitSystems; }
        }

        private void ImportUnitSystems(RepresentationSystem.Generated.UnitSystem unitSystem)
        {
            foreach (var unitOfMeasureSystem in unitSystem.UnitOfMeasureSystems)
            {
<<<<<<< HEAD
                UnitSystem domainId;
                if(Enum.TryParse(unitOfMeasureSystem.domainID, out domainId))
                {
                    var commonUnitSystem = new UnitOfMeasureSystem(domainId);
                    _unitSystems.Add(domainId, commonUnitSystem);
                    ImportUnitSystem(unitOfMeasureSystem, commonUnitSystem);
                }
=======
                _unitsTypes.Add(unitType.domainID, ImportUnitType(unitType));
>>>>>>> 363d978a247374c443331ec1c867bf3a384afe07
            }
        }

        private void ImportUnitSystem(UnitSystemUnitOfMeasureSystem unitOfMeasureSystem, UnitOfMeasureSystem commonUnitSystem)
        {
<<<<<<< HEAD
            foreach (var unitDomainId in unitOfMeasureSystem.UnitOfMeasureRef.Select(x => x.unitOfMeasureRef))
            {
                var matchingUnit = _unitsOfMeasure[unitDomainId];
                var unitTypes = _unitTypes.Values.Where(x => x.Units.Contains(matchingUnit));
                foreach (var unitType in unitTypes)
                {
                    if(!commonUnitSystem.UnitTypes.ContainsKey(unitType.DomainId))
                        commonUnitSystem.UnitTypes.Add(unitType.DomainId, new UnitType(unitType.Name, unitType.DomainId));
                    commonUnitSystem.UnitTypes[unitType.DomainId].Units.Add(matchingUnit);
                }
            }
        }

        private void ImportUnitTypes(RepresentationSystem.Generated.UnitSystem unitSystem)
        {
            foreach (var unitType in unitSystem.UnitTypes)
            {
                _unitTypes.Add(unitType.domainID, ImportUnitType(unitType));
            }
=======
            get { return _unitsTypes; }
>>>>>>> 363d978a247374c443331ec1c867bf3a384afe07
        }

        private UnitType ImportUnitType(UnitSystemUnitType unitType)
        {
            var typeName = unitType.Name.First(n => n.locale == CultureInfo.CurrentCulture.TwoLetterISOLanguageName);
            var type = new UnitType(typeName.Value, unitType.domainID);

            var simpleUnits = unitType.Items.OfType<UnitSystemUnitTypeUnitTypeRepresentation>()
                .SelectMany(utr => utr.UnitOfMeasure);
            foreach (var unit in simpleUnits)
            {
                var unitName = unit.Name.First(n => n.locale == CultureInfo.CurrentCulture.TwoLetterISOLanguageName);
<<<<<<< HEAD
                var unitOfMeasure = new UnitOfMeasure(unitName.label, unitName.plural, unit.domainID, unit.uomID, unit.baseOffset, unit.scale);

                if(!_unitsOfMeasure.ContainsKey(unitOfMeasure.DomainId))
                    _unitsOfMeasure.Add(unitOfMeasure.DomainId, unitOfMeasure);
                type.Units.Add(unitOfMeasure);
=======
                type.Units.Add(unit.domainID, new UnitOfMeasure(unitName.label, unitName.plural, unit.domainID, unit.uomID, unit.baseOffset, unit.scale));
>>>>>>> 363d978a247374c443331ec1c867bf3a384afe07
            }
            return type;
        }

        private RepresentationSystem.Generated.UnitSystem DeserializeUnitSystem()
        {
            var serializer = new XmlSerializer(typeof(RepresentationSystem.Generated.UnitSystem));
            var xmlStringBytes = System.Text.Encoding.UTF8.GetBytes(RepresentationResources.UnitSystem);
            using (var stream = new MemoryStream(xmlStringBytes))
                return (RepresentationSystem.Generated.UnitSystem)serializer.Deserialize(stream);
        }
    }
}
