<<<<<<< HEAD
﻿using System.Linq;
=======
﻿using JohnDeere.Representation.RepresentationSystem.Generated;
>>>>>>> 175caee3d8903d6cac3171988d90c21fbd1a30dc
using JohnDeere.Representation.UnitSystem;
using NUnit.Framework;

namespace JohnDeere.RepresentationTest.UnitSystem
{
    [TestFixture]
    public class CompositeUnitOfMeasureTest
    {
<<<<<<< HEAD
        [Test]
        public void GivenSquareUnitsWhenParsedShouldReturnSingleComponentWithPowerOfTwo()
        {
            var result = new CompositeUnitOfMeasure("m2");

            Assert.AreEqual(1, result.Components.Count);
            Assert.AreEqual(2, result.Components.First().Power);
            Assert.AreEqual("m", result.Components.First().DomainId);
        }

        [Test]
        public void GivenUnitWithNegativePowerWhenParsedShouldReturnSingleComponentWithPowerOfNegOne()
        {
            var result = new CompositeUnitOfMeasure("sec-1");

            Assert.AreEqual(1, result.Components.Count);
            Assert.AreEqual(-1, result.Components.First().Power);
            Assert.AreEqual("sec", result.Components.First().DomainId);
        }

        [Test]
        public void GivenCubedUnitWithNegativePowerWhenParsedShouldReturnSingleCompositeComponent()
        {
            var result = new CompositeUnitOfMeasure("[dm3]-1");

            Assert.AreEqual(1, result.Components.Count);

            var compositeComponent = (CompositeUnitOfMeasure) result.Components.First().Unit;
            Assert.AreEqual(3, compositeComponent.Components.First().Power);
            Assert.AreEqual("dm", compositeComponent.Components.First().DomainId);
        }

        [Test]
        public void GivenTwoUnitsWhenParsedShouldReturnTwoComponents()
        {
            var result = new CompositeUnitOfMeasure("bu1ac-1");

            Assert.AreEqual(2, result.Components.Count);

            Assert.AreEqual(1, result.Components.First().Power);
            Assert.AreEqual(-1, result.Components.Last().Power);

            Assert.AreEqual("bu", result.Components.First().DomainId);
            Assert.AreEqual("ac", result.Components.Last().DomainId);
        }

        [Test]
        public void GivenTwoUnitsWithOneSquaredWhenParsedShouldReturnOneSimpleAndOneCompositeComponent()
        {
            var result = new CompositeUnitOfMeasure("bu1[m2]-1");

            Assert.AreEqual(2, result.Components.Count);
            Assert.AreEqual(1, result.Components.First().Power);
            Assert.AreEqual("bu", result.Components.First().DomainId);

            Assert.AreEqual("m2", result.Components.Last().DomainId);
            Assert.AreEqual(-1, result.Components.Last().Power);
        }

        [Test]
        public void GivenComplexCompositeUnitWhenParsedShouldProperlyBreakDownDomainId()
        {
            var result = new CompositeUnitOfMeasure("[[am2]1am1]1[am2]-1");

            Assert.AreEqual("[[am2]1am1]1[am2]-1", result.DomainId);
            Assert.AreEqual("[am2]1am1", result.Components.First().DomainId);
            Assert.AreEqual("am2", result.Components.Last().DomainId);

            var numerator = (CompositeUnitOfMeasure) result.Components.First().Unit;
            Assert.AreEqual("am2", numerator.Components.First().DomainId);
            Assert.AreEqual("am", numerator.Components.Last().DomainId);

            var denominator = (CompositeUnitOfMeasure) result.Components.Last().Unit;
            Assert.AreEqual("am", denominator.Components.First().DomainId);
        }

        [Test]
        public void GivenComplexCompositeUnitWithComplexDenominatorShouldProperlyBreakDownDomainId()
        {
            var result = new CompositeUnitOfMeasure("bale1[[ft2]1yd1]-1");

            Assert.AreEqual("bale", result.Components.First().DomainId);

            Assert.AreEqual("[ft2]1yd1", result.Components.Last().DomainId);

            var denominator = (CompositeUnitOfMeasure) result.Components.Last().Unit;
            Assert.AreEqual("ft2", denominator.Components.First().DomainId);
            Assert.AreEqual("yd", denominator.Components.Last().DomainId);
=======
        private UnitSystemUnitTypeCompositeUnitTypeRepresentation _unitTypeRepresentation;

        [SetUp]
        public void Setup()
        {
            _unitTypeRepresentation = new UnitSystemUnitTypeCompositeUnitTypeRepresentation();
        }

        [Test]
        public void GivenDomainIdWhenCreatedThenDomainId()
        {
            _unitTypeRepresentation.domainID = "Shot Calla";
            var unitRepresentation = new CompositeUnitRepresentation(_unitTypeRepresentation, new UnitType(new UnitSystemUnitType()));
            Assert.AreEqual("Shot Calla", unitRepresentation.DomainId);
        }

        [Test]
        public void GivenUnitTypeWhenCreatedThenUnitType()
        {
            var unitType = new UnitType(new UnitSystemUnitType());
            var unitRepresentation = new CompositeUnitRepresentation(_unitTypeRepresentation, unitType);
            Assert.AreSame(unitType, unitRepresentation.UnitType);
>>>>>>> 175caee3d8903d6cac3171988d90c21fbd1a30dc
        }
    }
}
